/**********************************************
 * Organization of Folders
 * ==================================
 * problem: we need to have a place for everything. 
 * what should be: we should be quite organized in our code
 * what actually is: it's hard, like, really hard, to keep our directories and things organized. 
 * hypothesis: have a better method of keeping things organized, follow the marie kondon methodology in cleaning folders, function, classes, files in your work, spark complete joy here. 
 * 
 * Feature: 
 * 
 * 
 ********************************************/
const ccc = require("clear_concise_creative")
const automate_me = require("automate_me")

function webpack(obj) {
    let arr = Object.keys(obj)
    let newObj = {}
    for (let i = 0; i < arr.length; i++) {
        let replaceHyphen = arr[i].replaceAll("-", "_")
        newObj[replaceHyphen] = {
            commonjs: replaceHyphen,
            commonjs2: replaceHyphen,
            amd: replaceHyphen,
            root: replaceHyphen,
        }
    }
    return newObj;
}


/**
 * @example
moveToDeploy({
    "automate_me": "^1.0.3",
    "clean-jsdoc-theme": "^3.3.3",
    "clear_concise_creative": "^1.0.17",
    "jsdoc": "^3.6.10",
    "jsdoc-to-markdown": "^7.1.1"
}, "../../../../zen-out.github.io/packages/explain_me.html", true)
 * @author zen-out
 * @date 2022-03-10
 * @param {any} deployDependencies
 * @param {any}  zen_out
 * @param {any}  final = false
 * @returns {any}
 */
function moveToDeploy(deployDependencies, zen_out, final = false) {
    let currentVersion = ccc.getJSONObject("../deploy/package.json", ["version"])
    ccc.replaceJSON("../deploy/package.json", ["dependencies"], deployDependencies)
    ccc.replaceJSON("../deploy/package.json", ["devDependencies"], {})
    ccc.replaceJSON("../deploy/package.json", ["scripts"], {
        "play": "node playground.js",
        "deploy": "npm run play && git add . && git commit -m 'updated' && git push && npm version patch && npm publish"
    })
    ccc.copy("./dist/**.js", "../deploy/", true)
    let README = ccc.readFile("./README.md")
    ccc.writeFile("../deploy/README.md", README)
    let PLAYGROUND = ccc.readFile("./playground.js")
    ccc.writeFile("../deploy/playground.js", PLAYGROUND)
    let INDEX = ccc.readFile("./index.js")
    ccc.writeFile("../deploy/index.js", INDEX)
    let DOCS = ccc.readFile("./docs/global.html")
    ccc.writeFile("../deploy/docs.html", DOCS)
    ccc.writeFile(zen_out, DOCS)
    let getWebpack = webpack(deployDependencies)
    console.log(getWebpack, "\n1. replace this in externals\n2. type in npm run build and \n3. then run this command again, adding last parameter\n")
    if (final === true) {
        setTimeout(() => {

            automate_me.runCommand("cd .. && cd deploy && npm install && npm run deploy")
        }, 1000)
        setTimeout(() => {

            let latest = ccc.getJSONObject("../deploy/package.json", ["version"])
            if (currentVersion !== latest) {
                console.log("DEPLOYED")
            }
        }, 2000)
    }
}
module.exports = { moveToDeploy, webpack }